import { ApiService } from "./api.service";
import type { Book } from "@/types/book.interface";
import { useRuntimeConfig } from 'nuxt/app'

export class BooksService extends ApiService {


  // üîç Buscar libros en OpenLibrary v√≠a API interna
  async searchBooks(query: string): Promise<Book[]> {
    const config = useRuntimeConfig()
    const apiBase = config.public.apiBase as string
   const res = await this.api.get(`${apiBase}/books/search`, {
    params: { q: query },
  });
    return res.data;
  }

  // üìö Listar libros guardados en mi biblioteca 
  async getMyLibrary(): Promise<Book[]> {
    const res = await this.api.get("/books/my-library");
    return res.data;
  }
  // üìñ CRUD de libros
  async getBooks(): Promise<Book[]> {
    const res = await this.api.get("/books");
    return res.data;
  }

  // üîç Obtener un libro espec√≠fico desde la biblioteca
  async getBookById(id: string): Promise<Book> {
    const res = await this.api.get(`/books/my-library/${id}`);
    return res.data;
  }
  // ‚ûï Guardar un libro en la biblioteca
  async addBook(book: Book): Promise<Book> {
    const res = await this.api.post("/books/my-library", book);
    return res.data;
  }

  // ‚úèÔ∏è Actualizar informaci√≥n del libro (ej: review y calificaci√≥n)
  async updateBook(id: string, book: Partial<Book>): Promise<Book> {
    const res = await this.api.put(`/books/my-library/${id}`, book);
    return res.data;
  }

  // ‚ùå Eliminar un libro de la biblioteca
  async deleteBook(id: string): Promise<void> {
    await this.api.delete(`/books/my-library/${id}`);
  }
}
